import pytestfrom httpx import AsyncClient, ASGITransportfrom currency_service import api as api_module@pytest.fixture(autouse=True)def setup_api():    # ???????? ??? ????????? ? API ??????    class DummyStorage:        def __init__(self):            self.data = {}        async def get_all(self):            return self.data        async def get(self, currency):            return self.data.get(currency, 0)        async def set(self, currency, amount):            self.data[currency] = amount        async def modify(self, changes):            for k, v in changes.items():                self.data[k] = self.data.get(k, 0) + v    class DummyRateAPI:        async def fetch_rates(self):            return {"rub": 1, "usd": 100, "eur": 120}    # ?????????????? api_module ? ?????????? ? ????????    api_module.init_app(        _storage=DummyStorage(),        _api=DummyRateAPI(),        currencies=["rub", "usd", "eur"],        enable_debug=False    )    yield  # ?????????? ?????    # ??????? overrides ????? ?????    api_module.app.dependency_overrides = {}@pytest.mark.asyncioasync def test_root_returns_404():    transport = ASGITransport(app=api_module.app)    async with AsyncClient(transport=transport, base_url="http://test") as ac:        response = await ac.get("/")        assert response.status_code == 404@pytest.mark.asyncioasync def test_amount_get():    # ?????????????? ??????????? ??? ????????????? ??????? ????????    api_module.app.dependency_overrides = {        api_module.get_storage: lambda: api_module.storage,        api_module.get_api: lambda: api_module.api,    }    transport = ASGITransport(app=api_module.app)    async with AsyncClient(transport=transport, base_url="http://test") as ac:        response = await ac.get("/amount/get")        assert response.status_code == 200        assert "rub:" in response.text        assert "usd:" in response.text        assert "eur:" in response.text        assert "sum:" in response.text@pytest.mark.asyncioasync def test_amount_set():    api_module.app.dependency_overrides = {        api_module.get_storage: lambda: api_module.storage,    }    transport = ASGITransport(app=api_module.app)    async with AsyncClient(transport=transport, base_url="http://test") as ac:        response = await ac.post("/amount/set", json={"usd": 150})        assert response.status_code == 200        assert response.json() == {"status": "success"}        # ?????????, ??? ???????? ???????????        stored_value = await api_module.storage.get("usd")        assert stored_value == 150@pytest.mark.asyncioasync def test_amount_set_no_data():    api_module.app.dependency_overrides = {        api_module.get_storage: lambda: api_module.storage,    }    transport = ASGITransport(app=api_module.app)    async with AsyncClient(transport=transport, base_url="http://test") as ac:        response = await ac.post("/amount/set", json={})        assert response.status_code == 400        assert "No valid currency values provided" in response.text@pytest.mark.asyncioasync def test_currency_get_and_modify():    api_module.app.dependency_overrides = {        api_module.get_storage: lambda: api_module.storage,    }    # ??????? ????????? ????????    await api_module.storage.set("rub", 10)    await api_module.storage.set("usd", 20)    await api_module.storage.set("eur", 30)    transport = ASGITransport(app=api_module.app)    async with AsyncClient(transport=transport, base_url="http://test") as ac:        # GET ????????? ??????        resp = await ac.get("/usd/get")        assert resp.status_code == 200        assert resp.json() == {"name": "USD", "value": 20}        # POST modify: ????????? 5 ? eur ? ?????? 2 ?? rub        resp = await ac.post("/modify", json={"eur": 5, "rub": -2})        assert resp.status_code == 200        assert resp.json() == {"status": "success"}        val_eur = await api_module.storage.get("eur")        val_rub = await api_module.storage.get("rub")        assert val_eur == 35        assert val_rub == 8